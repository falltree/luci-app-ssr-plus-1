<%+cbi/valueheader%>
<script type="text/javascript">//<![CDATA[
	function padright(str, cnt, pad) {
		return str + Array(cnt + 1).join(pad);
	}
	
	function b64EncodeUnicode(str) {
		return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {
			return String.fromCharCode('0x' + p1);
		}));
	}
	
	function b64encutf8safe(str) {
		return b64EncodeUnicode(str).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, '');
	}
	
	function b64DecodeUnicode(str) {
		return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {
			return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
		}).join(''));
	}
	
	function b64decutf8safe(str) {
		var l;
		str = str.replace(/-/g, "+").replace(/_/g, "/");
		l = str.length;
		l = (4 - l % 4) % 4;
		if (l)
			str = padright(str, l, "=");
		return b64DecodeUnicode(str);
	}
	
	function b64encsafe(str) {
		return btoa(str).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, '')
	}
	
	function b64decsafe(str) {
		var l;
		str = str.replace(/-/g, "+").replace(/_/g, "/");
		l = str.length;
		l = (4 - l % 4) % 4;
		if (l)
			str = padright(str, l, "=");
		return atob(str);
	}
	
	function dictvalue(d, key) {
		var v = d[key];
		if (typeof(v) == 'undefined' || v == '')
			return '';
		return b64decsafe(v);
	}
	
	function export_ssr_url(btn, urlname, sid) {
		var opt = {
			base: 'cbid.shadowsocksr',
			fallback: 'dummy',
			get: function(opt) {
				var obj;
				var id = this.base + '.' + opt;
				obj = document.getElementsByName(id)[0] || document.getElementById(id);
				if (obj) {
					return obj;
				} else {
					alert('Faltal on get option: ' + opt);
					return document.getElementById(this.fallback);
				}
			}
		}
		
		var s = document.getElementById(urlname + '-status');
		if (!s) {
			alert("Faltal");
			return false;
		}
		opt.base = 'cbid.shadowsocksr.' + sid
		opt.fallback = urlname + '-dummy';
		var v_type = opt.get('type').value;
		var url = null
		if (v_type === "ssr") {
			var v_server = opt.get('server');
			var v_port = opt.get('server_port');
			var v_protocol = opt.get('protocol');
			var v_method = opt.get('encrypt_method');
			var v_obfs = opt.get('obfs');
			var v_password = opt.get('password');
			var v_obfs_param = opt.get('obfs_param');
			var v_protocol_param = opt.get('protocol_param');
			var v_alias = opt.get('alias');
			var ssr_str = v_server.value + ":" +
				v_port.value + ":" +
				v_protocol.value + ":" +
				v_method.value + ":" +
				v_obfs.value + ":" +
				b64encsafe(v_password.value) +
				"/?obfsparam=" + b64encsafe(v_obfs_param.value) +
				"&protoparam=" + b64encsafe(v_protocol_param.value) +
				"&remarks=" + b64encutf8safe(v_alias.value);
			url = b64encsafe(ssr_str);
		}
		if (url) {
			var textarea = document.createElement("textarea");
			textarea.textContent =  v_type + "://" + url
			textarea.style.position = "fixed";
			document.body.appendChild(textarea);
			textarea.select();
			try {
				document.execCommand("copy"); // Security exception may be thrown by some browsers.
				s.innerHTML = "<font color='green'><%:Copy SSR to clipboard successfully.%></font>";
			} catch (ex) {
				s.innerHTML = "<font color='red'><%:Unable to copy SSR to clipboard.%></font>";
			} finally {
				document.body.removeChild(textarea);
			}
			} else {
			alert("Current not supported for: " + v_type)
		}
		return false;
	}
	
	function import_ssr_url(btn, urlname, sid) {
		var opt = {
			base: 'cbid.shadowsocksr',
			fallback: 'dummy',
			get: function(opt) {
				var obj;
				var id = this.base + '.' + opt;
				obj = document.getElementsByName(id)[0] || document.getElementById(id);
				if (obj) {
					return obj;
				} else {
					alert('Faltal on get option: ' + opt);
					return document.getElementById(this.fallback);
				}
			},
			set: function(opt, val) {
				var obj;
				obj = this.get(opt)
				if (obj) {
					if (obj.type == 'checkbox') {
						var event = document.createEvent("HTMLEvents");
						event.initEvent("change", true, true);
						obj.checked = val;
						obj.dispatchEvent(event);
					} else {
						obj.value = val;
					}
				} else {
					alert('Fatal on set option: ' + opt + ' = ' + val);
				}
			}
		}
		
		var s = document.getElementById(urlname + '-status');
		if (!s) {
			alert("Faltal");
			return false;
		}
		opt.base = 'cbid.shadowsocksr.' + sid
		opt.fallback = urlname + '-dummy';
		var ssrurl = prompt("在这里黏贴配置链接 ssr:// | ss:// | vmess:// | trojan:// | trojan-go://", "");
		if (ssrurl == null || ssrurl == "") {
			s.innerHTML = "<font color='red'>用户取消</font>";
			return false;
		}
		s.innerHTML = "";
		var ssu = ssrurl.split('://');
		var event = document.createEvent("HTMLEvents");
		event.initEvent("change", true, true);
		if (ssu[0] == "ssr") {
			//var b64c = ssu[1].match(/([A-Za-z0-9_-]+)/);
			var sstr = b64decsafe(ssu[1]);
			var ploc = sstr.indexOf("/?");
			var url0 = "", param = "";
			if (ploc > 0) {
				url0 = sstr.substr(0, ploc);
				param = sstr.substr(ploc + 2);
			}
			console.log(param);
			var ssm = url0.match(/^(.+):([^:]+):([^:]*):([^:]+):([^:]*):([^:]+)/);
			if (!ssm || ssm.length < 7) {
				s.innerHTML = "<font color='red'>无效格式</font>";
				return false;
			}
			var pdict = {};
			if (param.length > 2) {
				var a = param.split('&');
				for (var i = 0; i < a.length; i++) {
					var b = a[i].split('=');
					pdict[decodeURIComponent(b[0])] = decodeURIComponent(b[1] || '');
				}
			}
			opt.set('type', "ssr");
			opt.get('type').dispatchEvent(event);
			opt.set('server', ssm[1]);
			opt.set('server_port', ssm[2]);
			opt.set('protocol', ssm[3]);
			opt.set('encrypt_method', ssm[4]);
			opt.set('obfs', ssm[5]);
			opt.set('password', b64decsafe(ssm[6]));
			opt.set('obfs_param', dictvalue(pdict, 'obfsparam'));
			opt.set('protocol_param', dictvalue(pdict, 'protoparam'));
			var rem = pdict['remarks'];
			if (typeof(rem) != 'undefined' && rem != '' && rem.length > 0)
				opt.set('alias', b64decutf8safe(rem));
		} else if (ssu[0] == "ss") {
			var url0 = "", param = "";
			var sipIndex = ssu[1].indexOf("@");
			var ploc = ssu[1].indexOf("#");
			if (ploc > 0) {
				url0 = ssu[1].substr(0, ploc);
				param = ssu[1].substr(ploc + 1);
			} else {
				url0 = ssu[1];
			}
			console.log(param);
			if (sipIndex != -1) {
				// SIP002
				var userInfo = b64decsafe(url0.substr(0, sipIndex));
				var temp = url0.substr(sipIndex + 1).split("/?");
				var serverInfo = temp[0].split(":");
				var server = serverInfo[0];
				var port = serverInfo[1];
				var method, password, plugin, pluginOpts;
				if (temp[1]) {
					var pluginInfo = decodeURIComponent(temp[1]);
					var pluginIndex = pluginInfo.indexOf(";");
					var pluginNameInfo = pluginInfo.substr(0, pluginIndex);
					plugin = pluginNameInfo.substr(pluginNameInfo.indexOf("=") + 1)
					pluginOpts = pluginInfo.substr(pluginIndex + 1);
				}
				var userInfoSplitIndex = userInfo.indexOf(":");
				if (userInfoSplitIndex != -1) {
					method = userInfo.substr(0, userInfoSplitIndex);
					password = userInfo.substr(userInfoSplitIndex + 1);
				}
				opt.set('type', "ss");
				opt.get('type').dispatchEvent(event);
				opt.set('server', server);
				opt.set('server_port', port);
				opt.set('password', password || "");
				opt.set('encrypt_method_ss', method || "");
				opt.set('plugin', plugin || "");
				opt.set('plugin_opts', pluginOpts || "");
				if (param != undefined) {
					opt.set('alias', decodeURI(param));
				}
			} else {
				var sstr = b64decsafe(url0);
				var team = sstr.split('@');
				opt.set('type', "ss");
				opt.get('type').dispatchEvent(event);
				var part1 = team[0].split(':');
				var part2 = team[1].split(':');
				opt.set('server', part2[0]);
				opt.set('server_port', part2[1]);
				opt.set('password', part1[1]);
				opt.set('encrypt_method_ss', part1[0]);
				opt.set('plugin', "");
				opt.set('plugin_opts', "");
				if (param != undefined) {
					opt.set('alias', decodeURI(param));
				}
			}
		} else if (ssu[0] == "trojan") {
			var url0 = "", param = "";
			var ploc = ssu[1].indexOf("#");
			if (ploc > 0) {
				url0 = ssu[1].substr(0, ploc);
				param = ssu[1].substr(ploc + 1);
			} else {
				url0 = ssu[1];
			}
			console.log(param);
			var stype = "trojan";
			var team = url0.split('@');
			var password = team[0];
			var serverPart = team[1].split(':');
			var others = serverPart[1].split('?');
			var port = others[0];
			var queryParam = {};
			if (others.length > 1) {
				var queryParams = others[1];
				var queryArray = queryParams.split('&');
				for (i = 0; i < queryArray.length; i++) {
					var params = queryArray[i].split('=');
					queryParam[decodeURIComponent(params[0]).toLowerCase()] = decodeURIComponent(params[1] || '');
				}
			}
			if (queryParam.mux || queryParam.ws || queryParam.ss) {
				stype = "trojan-go";
			}
			opt.set('type', stype);
			opt.get('type').dispatchEvent(event);
			opt.set('server', serverPart[0]);
			opt.set('server_port', port);
			opt.set('password', password);
			opt.set('tls', true);
			opt.set('tls_host', queryParam.peer || queryParam.sni || '');
			opt.set('insecure', queryParam.allowinsecure == '1');
			if (queryParam.ws) {
				opt.set('trojan_ws', queryParam.ws == '1');
			if (queryParam.ws == '1') {
				opt.set('ws_host', queryParam.wshost || '');
				opt.set('ws_path', queryParam.wspath || '/');
			}}
			if (queryParam.ss) {
				opt.set('ss_aead', queryParam.ss == '1');
			if (queryParam.ss == '1') {
				opt.set('ss_aead_method', queryParam.ssmethod.toUpperCase() || '');
				opt.set('ss_aead_pwd', queryParam.sspasswd || '');
			}}
			if (queryParam.mux)
				opt.set('mux', queryParam.mux == '1');
			if (param != undefined) {
				opt.set('alias', decodeURI(param));
			}
		} else if (ssu[0] == "trojan-go") {
			return false;
		} else if (ssu[0] == "vmess") {
			var sstr = b64DecodeUnicode(ssu[1]);
			var ploc = sstr.indexOf("/?");
			opt.set('type', "v2ray");
			opt.get('type').dispatchEvent(event);
			var url0, param = "";
			if (ploc > 0) {
				url0 = sstr.substr(0, ploc);
				param = sstr.substr(ploc + 2);
			}
			var ssm = JSON.parse(sstr);
			opt.set('alias', ssm.ps);
			opt.set('server', ssm.add);
			opt.set('server_port', ssm.port);
			opt.set('alter_id', ssm.aid);
			opt.set('vmess_id', ssm.id);
			opt.set('transport', ssm.net);
			opt.get('transport').dispatchEvent(event);
			if (ssm.net == "tcp") {
				opt.set('http_host', ssm.host);
				opt.set('http_path', ssm.path);
			}
			if (ssm.net == "ws") {
				opt.set('ws_host', ssm.host);
				opt.set('ws_path', ssm.path);
			}
			if (ssm.net == "h2") {
				opt.set('h2_host', ssm.host);
				opt.set('h2_path', ssm.path);
			}
			if (ssm.net == "quic") {
				opt.set('quic_security', ssm.securty);
				opt.set('quic_key', ssm.key);
			}
			if (ssm.net == "kcp") {
				opt.set('kcp_guise', ssm.type);
			}
			if (ssm.tls == "tls") {
				opt.set('tls', true);
				opt.set('tls_host', ssm.host);
			}
		} else {
			s.innerHTML = "<font color='red'>尚不支持的格式</font>: " + ssu[0];
			return false;
		}
		s.innerHTML = "<font color='green'>完成配置导入，检查后保存</font>";
		return false;
	}
//]]></script>
<input type="test" class="hidden" id="<%=self.option%>-dummy" value="-dummy-" />
<input type="button" class="cbi-button cbi-button-apply" value="导入配置" onclick="return import_ssr_url(this, '<%=self.option%>', '<%=self.value%>')" />
<input type="button" class="cbi-button cbi-button-apply" value="导出配置" onclick="return export_ssr_url(this, '<%=self.option%>', '<%=self.value%>')" />
<span id="<%=self.option%>-status"></span>
<%+cbi/valuefooter%>
