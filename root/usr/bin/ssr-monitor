#!/bin/sh 
#
# Copyright (C) 2017 openwrt-ssr
# Copyright (C) 2017 yushi studio <ywb94@qq.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#


NAME=shadowsocksr
TMP_PATH="/var/etc/${NAME}/bin"

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

count_running() {
	filter=${1}
	ssr_bin=${2}
	busybox ps -w  | grep "${ssr_bin:+${TMP_PATH}/}${1}" |grep -v grep| wc -l
}
server_process_count=$1
redir_tcp_process=$2
redir_udp_process=$3
tunnel_process=$4
kcp_process=$5
local_process=$6
pdnsd_process=$7

i=0

GLOBAL_SERVER=$(uci_get_by_type global global_server)
server=$(uci_get_by_name $GLOBAL_SERVER server)
lkcp_port=$(uci_get_by_name $GLOBAL_SERVER kcp_port)
server_port=$(uci_get_by_name $GLOBAL_SERVER server_port)
password=$(uci_get_by_name $GLOBAL_SERVER kcp_password)
kcp_param=$(uci_get_by_name $GLOBAL_SERVER kcp_param)
[ "$password" != "" ] && password="--key "${password}
sock5_port=$(uci_get_by_type socks5_proxy local_port 1080)

while [ "1" = "1" ]
do 
   sleep 30
   loglines=$(cat /tmp/ssrplus.log | wc -l)
   [ "$loglines" -gt 150 ] && {
        cat /tmp/ssrplus.log > /tmp/ssrpro.log
        tail -n50 /tmp/ssrpro.log >/tmp/ssrplus.log
    }
			server=$(cat /etc/ssr/ssr_ip)
#redir tcp
			if [ "$redir_tcp_process" -gt 0 ] ;then
			icount=$(count_running shadowsocksr.json)
			if [ "$icount" -eq 0 ]; then
			logger -t "$NAME" "ssr redir tcp error.restart!"
			 /etc/init.d/shadowsocksr restart 
			exit 0
			fi
			fi
#redir udp
			if [ "$redir_udp_process" -gt 0 ] ;then
			icount=$(count_running shadowsocksr_u.json)
			if [ "$icount" -eq 0 ] ;then
			logger -t "$NAME" "ssr redir udp error.restart!"
			 /etc/init.d/shadowsocksr restart 
			exit 0
			fi
			fi
#tunnel
			if [ "$tunnel_process" -gt 0 ] ;then
			icount=$(count_running ssr-tunnel 1)
			if [ $icount = 0 ] ;then
			logger -t "$NAME" "ssr tunnel error.restart!"
			 /etc/init.d/shadowsocksr restart 
			exit 0
			fi
			fi
#server
      if [ "$server_process_count" -gt 0 ] ;then
      icount=$(count_running ssr-server 1)
      if [ "$icount" -lt "$server_process_count" ]
      then
      logger -t "$NAME" "ssr server error.restart!"
      killall -q -9 ssr-server 
      for i in $(seq $server_process_count)
      do
       /var/etc/shadowsocksr/bin/ssr-server -c /var/etc/shadowsocksr/shadowsocksr_$i.json -u -f /var/run/ssr-server$i.pid   
      done  
      fi   
      fi
#kcptun
      if [ "$kcp_process" -gt 0 ]; then
      icount=$(count_running kcptun-client 1)
      if [ "$icount" -lt "$kcp_process" ]
      then
      logger -t "$NAME" "ssr kcptun error.restart!"
      killall -q -9 kcptun-client
      /var/etc/shadowsocksr/bin/kcptun-client -r $server:$kcp_port -l :$server_port  $password $kcp_param &
      fi   
      fi
#local
      if [ "$local_process" -gt 0 ] ;then
      icount=$(count_running shadowsocksr_s.json)
      if [ "$icount" -lt "$local_process" ]
      then
      logger -t "$NAME" "ssr local error.restart!"
      /etc/init.d/shadowsocksr restart
      exit 0
      fi   
      fi
#pdnsd
		if [ "$pdnsd_process" -gt 0 ] ;then
		icount=$(count_running pdnsd_ssr)
		if [ "$icount" -lt "$pdnsd_process" ]
		then
		logger -t "$NAME" "pdnsd tunnel error.restart!"
    /etc/init.d/shadowsocksr restart
    exit 0
		fi   
		fi      
done
